#!/usr/bin/perl -w

$id="Perl script: spotmovie.pl version 0.1.0, 10/1/17";

=begin

Author: John McClymont

This script attempts to find a movie on a "Wanted" list within a
downloaded TV schedule.

This script is designed to be used on the raspberrypi1 machine.

Debug level is set by a command line argument
  :Level 0 - no debug information
  :Level 1 - returns input
  :Level 2 - returns processing information

INPUT: temp.txt (HanDBase output containing Wanted list. This file is
       created by running HanDBase for Android. The file is made
       available to raspberrypi1 via MegaSync.)
       list.xmltv (Downloaded weekly TV schedule. This is generated by
       a cron job local to raspberrypi1 which uses the XMLTV system.)
OUTPUT: spotmovie.txt (This file is created in the script folder which is
        made available to other devices via MyCloud.)

Future development:
1) Currently only uses one TV schedule file. Might want to extend this.
2) Could email results rather than write to file
3) In first part of code where WANTED data is being partitioned, Could
   try to use the "push" function, rather than the false loop
4) Might want to extra the debug level handling into a function

=cut

# Get debug level from command line
$debug=$ARGV[0];

# If no argument supplied set debug level to 0
if (not defined $debug) {$debug=0};

# If debug level outside of range set to 2
if ($debug > 2) {$debug=2};

# Print script ID to console
print "$id\n";

# Get date and time and print to console
$datestring=localtime();
print "Run started $datestring\n";

if ($debug > 0) {print "Debug level: $debug\n"};

# Open output file and print basic information
open (OUT, ">spotmovie.txt") || die "Cannot open spotmovie.txt: $!\n";
print OUT "$id\n";
print OUT "Run started $datestring\n\n";

# Open HanDBase file
open (WANTED, "</mnt/jdm_wd3t/devprojects/HanDBase/temp.txt")
  || die "Cannot open temp.txt: $!\n";

# Read WANTED records, remove EOL and close
@wanted=<WANTED>;
chomp(@wanted);
close(WANTED);

# Get number of records in WANTED
$numwanted=@wanted;
$nummovies=$numwanted/6;
print OUT "No. of Wanted Movies: $nummovies\n\n";

$c=0;
# Loop through @wanted pulling out required data
for($w=0; $w<$numwanted; $w++) {
  # Get movie name
  $wantedname[$c]=substr($wanted[$w], index($wanted[$w],':') + 1);
  # Reverse trailing definite article
  if (index($wantedname[$c],', The') ne -1) {
    $wantedname[$c] = qq(The).
        substr($wantedname[$c],0,index($wantedname[$c], ','));
  }
  # Reverse trailing indefinite article
  if (index($wantedname[$c],', A') ne -1) {
    $wantedname[$c] = qq(A).
        substr($wantedname[$c],0,index($wantedname[$c], ','));
  }
  $wantedname[$c] =~ s/^\s+|\s+$//g;  # trim whitespace
  $w++;
  # Get movie year
  $wantedyear[$c]=substr($wanted[$w], index($wanted[$w],':') + 1);
  $wantedyear[$c] =~ s/^\s+|\s+$//g;  # trim whitespace
  $w++;
  # Get movie director
  $wanteddirector[$c]=substr($wanted[$w], index($wanted[$w],':') + 1);
  $wanteddirector[$c] =~ s/^\s+|\s+$//g;  # trim whitespace
  $w++;
  # Get AKA name
  $wantedaka[$c]=substr($wanted[$w], index($wanted[$w],':') + 1);
  $wantedaka[$c] =~ s/^\s+|\s+$//g;  # trim whitespace
  $w++;
  # Get principal actor
  $wantedactor[$c]=substr($wanted[$w], index($wanted[$w],':') + 1);
  $wantedactor[$c] =~ s/^\s+|\s+$//g;  # trim whitespace
  $w++;
  # Get divider string
  $divider=$wanted[$w];
  $c++;
}

if ($debug == 1) {
  print OUT "WANTED data\n";
  print OUT "$divider\n";
  for($c=0; $c<$nummovies; $c++) {
    # Print copy of data to OUT file
    print OUT $wantedname[$c].qq(,).$wantedyear[$c].qq(,).
      $wanteddirector[$c].qq(,).$wantedaka[$c].qq(,).$wantedactor[$c]."\n";
    }
  print OUT "$divider\n";
}

# Open list.xmltv input file
open (SCHEDULE, "</home/pi/.freeguide/list.xmltv")
      || die "Cannot open list.xmltv: $!\n";

# Read schedule list file, remove EOL and close
@schedule=<SCHEDULE>;
chomp(@schedule);
close(SCHEDULE);

#Pull out title records (look for "<title" string)
foreach $s (@schedule) {
  if ($s=~/<title/) {push(@alltitle,$s)};
}

# Reduce schedule items to unique items
%list = ();
foreach (@alltitle) {$list{$_} = 1};
@title = keys %list;

# Sort the unique items
@title = sort(@title);

if ($debug == 1) {
  print OUT "Schedule data\n";
  print OUT "$divider\n";
  foreach $t (@title) {
    print OUT "$t\n";
  }
  print OUT "$divider\n";
}

# +++++Now processing data++++++

# For each movie name:
foreach $a (@wantedname) {

  if ($debug == 2) {
    print OUT "Wanted: $a\n";
    print OUT "$divider\n";
}

	# For each title entry in the schedule:
	foreach $t (@title) {

    if ($debug == 2) {
      print OUT "Title: $t\n";
}

		# Check movie name against record contents
		if ($t=~/$a/i) {

      if ($debug == 2) {
        print OUT "Found: $a\n";
        print OUT "$divider\n";
      }

      push(@found,$a);
		}
	}
}

# Reduce found items to unique items
%got = ();
foreach (@found) {$got{$_} = 1};
@unifound = keys %got;

# Sort the unique items
@unifound = sort(@unifound);

# Print results to file
print OUT "Wanted Movies potentially found: ".scalar(@unifound)."\n\n";
foreach $u (@unifound) {
  print OUT "Found: $u\n";
}

# Get date and time, write to file and close file
$datestring=localtime();
print OUT "\nEnd of $id\n";
print OUT "Run ended $datestring\n";
close(OUT);

print "Run ended $datestring\n";

# end of script spotmovie.pl
